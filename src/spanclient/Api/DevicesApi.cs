/* 
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.0.12 reported-davon
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using spanclient.Client;
using spanclient.Model;

namespace spanclient.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        Device CreateDevice (string collectionId, Device body);

        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> CreateDeviceWithHttpInfo (string collectionId, Device body);
        /// <summary>
        /// Remove device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Device</returns>
        Device DeleteDevice (string collectionId, string deviceId);

        /// <summary>
        /// Remove device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> DeleteDeviceWithHttpInfo (string collectionId, string deviceId);
        /// <summary>
        /// Get payloads
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <returns>ListDataResponse</returns>
        ListDataResponse ListDeviceData (string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string));

        /// <summary>
        /// Get payloads
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <returns>ApiResponse of ListDataResponse</returns>
        ApiResponse<ListDataResponse> ListDeviceDataWithHttpInfo (string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string));
        /// <summary>
        /// List devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ListDevicesResponse</returns>
        ListDevicesResponse ListDevices (string collectionId);

        /// <summary>
        /// List devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ApiResponse of ListDevicesResponse</returns>
        ApiResponse<ListDevicesResponse> ListDevicesWithHttpInfo (string collectionId);
        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// Retrieve a single device
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Device</returns>
        Device RetrieveDevice (string collectionId, string deviceId);

        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// Retrieve a single device
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> RetrieveDeviceWithHttpInfo (string collectionId, string deviceId);
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// Send a message to the device
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        Object SendMessage (string collectionId, string deviceId, SendMessageRequest body);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// Send a message to the device
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> SendMessageWithHttpInfo (string collectionId, string deviceId, SendMessageRequest body);
        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        Device UpdateDevice (string existingCollectionId, string deviceId, UpdateDeviceRequest body);

        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        ApiResponse<Device> UpdateDeviceWithHttpInfo (string existingCollectionId, string deviceId, UpdateDeviceRequest body);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> CreateDeviceAsync (string collectionId, Device body);

        /// <summary>
        /// Create device
        /// </summary>
        /// <remarks>
        /// Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> CreateDeviceAsyncWithHttpInfo (string collectionId, Device body);
        /// <summary>
        /// Remove device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> DeleteDeviceAsync (string collectionId, string deviceId);

        /// <summary>
        /// Remove device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> DeleteDeviceAsyncWithHttpInfo (string collectionId, string deviceId);
        /// <summary>
        /// Get payloads
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <returns>Task of ListDataResponse</returns>
        System.Threading.Tasks.Task<ListDataResponse> ListDeviceDataAsync (string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string));

        /// <summary>
        /// Get payloads
        /// </summary>
        /// <remarks>
        /// List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <returns>Task of ApiResponse (ListDataResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDataResponse>> ListDeviceDataAsyncWithHttpInfo (string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string));
        /// <summary>
        /// List devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>Task of ListDevicesResponse</returns>
        System.Threading.Tasks.Task<ListDevicesResponse> ListDevicesAsync (string collectionId);

        /// <summary>
        /// List devices
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>Task of ApiResponse (ListDevicesResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<ListDevicesResponse>> ListDevicesAsyncWithHttpInfo (string collectionId);
        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// Retrieve a single device
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> RetrieveDeviceAsync (string collectionId, string deviceId);

        /// <summary>
        /// Retrieve device
        /// </summary>
        /// <remarks>
        /// Retrieve a single device
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> RetrieveDeviceAsyncWithHttpInfo (string collectionId, string deviceId);
        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// Send a message to the device
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> SendMessageAsync (string collectionId, string deviceId, SendMessageRequest body);

        /// <summary>
        /// Send message
        /// </summary>
        /// <remarks>
        /// Send a message to the device
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SendMessageAsyncWithHttpInfo (string collectionId, string deviceId, SendMessageRequest body);
        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Device</returns>
        System.Threading.Tasks.Task<Device> UpdateDeviceAsync (string existingCollectionId, string deviceId, UpdateDeviceRequest body);

        /// <summary>
        /// Update device
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Device)</returns>
        System.Threading.Tasks.Task<ApiResponse<Device>> UpdateDeviceAsyncWithHttpInfo (string existingCollectionId, string deviceId, UpdateDeviceRequest body);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesApi : IDevicesApiSync, IDevicesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevicesApi : IDevicesApi
    {
        private spanclient.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesApi(String basePath)
        {
            this.Configuration = spanclient.Client.Configuration.MergeConfigurations(
                spanclient.Client.GlobalConfiguration.Instance,
                new spanclient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new spanclient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spanclient.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = spanclient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevicesApi(spanclient.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = spanclient.Client.Configuration.MergeConfigurations(
                spanclient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new spanclient.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new spanclient.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = spanclient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public DevicesApi(spanclient.Client.ISynchronousClient client,spanclient.Client.IAsynchronousClient asyncClient, spanclient.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = spanclient.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public spanclient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public spanclient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public spanclient.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public spanclient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Create device Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        public Device CreateDevice (string collectionId, Device body)
        {
             spanclient.Client.ApiResponse<Device> localVarResponse = CreateDeviceWithHttpInfo(collectionId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create device Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        public spanclient.Client.ApiResponse< Device > CreateDeviceWithHttpInfo (string collectionId, Device body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->CreateDevice");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->CreateDevice");

            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spanclient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spanclient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Device >("/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create device Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> CreateDeviceAsync (string collectionId, Device body)
        {
             spanclient.Client.ApiResponse<Device> localVarResponse = await CreateDeviceAsyncWithHttpInfo(collectionId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create device Create a new device. This will add a device to the collection. You must have write access to the collection.
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">This is the containing collection</param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<spanclient.Client.ApiResponse<Device>> CreateDeviceAsyncWithHttpInfo (string collectionId, Device body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->CreateDevice");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->CreateDevice");


            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Device>("/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("CreateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove device 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Device</returns>
        public Device DeleteDevice (string collectionId, string deviceId)
        {
             spanclient.Client.ApiResponse<Device> localVarResponse = DeleteDeviceWithHttpInfo(collectionId, deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Remove device 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Device</returns>
        public spanclient.Client.ApiResponse< Device > DeleteDeviceWithHttpInfo (string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->DeleteDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeleteDevice");

            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spanclient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spanclient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete< Device >("/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Remove device 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> DeleteDeviceAsync (string collectionId, string deviceId)
        {
             spanclient.Client.ApiResponse<Device> localVarResponse = await DeleteDeviceAsyncWithHttpInfo(collectionId, deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Remove device 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<spanclient.Client.ApiResponse<Device>> DeleteDeviceAsyncWithHttpInfo (string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->DeleteDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->DeleteDevice");


            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Device>("/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payloads List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <returns>ListDataResponse</returns>
        public ListDataResponse ListDeviceData (string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string))
        {
             spanclient.Client.ApiResponse<ListDataResponse> localVarResponse = ListDeviceDataWithHttpInfo(collectionId, deviceId, limit, start, end);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get payloads List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <returns>ApiResponse of ListDataResponse</returns>
        public spanclient.Client.ApiResponse< ListDataResponse > ListDeviceDataWithHttpInfo (string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDeviceData");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ListDeviceData");

            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spanclient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spanclient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(spanclient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(spanclient.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(spanclient.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ListDataResponse >("/collections/{collectionId}/devices/{deviceId}/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeviceData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get payloads List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <returns>Task of ListDataResponse</returns>
        public async System.Threading.Tasks.Task<ListDataResponse> ListDeviceDataAsync (string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string))
        {
             spanclient.Client.ApiResponse<ListDataResponse> localVarResponse = await ListDeviceDataAsyncWithHttpInfo(collectionId, deviceId, limit, start, end);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get payloads List the data received from the device. Use the query parameters to control what data you retrieve.
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId">The collection ID. This is included in the request path.</param>
        /// <param name="deviceId">The device ID. This is included in the request path.</param>
        /// <param name="limit">Limit the number of payloads to return. The default is 512. (optional)</param>
        /// <param name="start">Start of time range. The default is 24 hours ago. Value is in milliseconds since epoch. (optional)</param>
        /// <param name="end">End of time range. The default is the current time stamp. Value is in milliseconds since epoch. (optional)</param>
        /// <returns>Task of ApiResponse (ListDataResponse)</returns>
        public async System.Threading.Tasks.Task<spanclient.Client.ApiResponse<ListDataResponse>> ListDeviceDataAsyncWithHttpInfo (string collectionId, string deviceId, int? limit = default(int?), string start = default(string), string end = default(string))
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDeviceData");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->ListDeviceData");


            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(spanclient.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (start != null)
            {
                localVarRequestOptions.QueryParameters.Add(spanclient.Client.ClientUtils.ParameterToMultiMap("", "start", start));
            }
            if (end != null)
            {
                localVarRequestOptions.QueryParameters.Add(spanclient.Client.ClientUtils.ParameterToMultiMap("", "end", end));
            }

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDataResponse>("/collections/{collectionId}/devices/{deviceId}/data", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDeviceData", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List devices 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ListDevicesResponse</returns>
        public ListDevicesResponse ListDevices (string collectionId)
        {
             spanclient.Client.ApiResponse<ListDevicesResponse> localVarResponse = ListDevicesWithHttpInfo(collectionId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// List devices 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>ApiResponse of ListDevicesResponse</returns>
        public spanclient.Client.ApiResponse< ListDevicesResponse > ListDevicesWithHttpInfo (string collectionId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDevices");

            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spanclient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spanclient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< ListDevicesResponse >("/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// List devices 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>Task of ListDevicesResponse</returns>
        public async System.Threading.Tasks.Task<ListDevicesResponse> ListDevicesAsync (string collectionId)
        {
             spanclient.Client.ApiResponse<ListDevicesResponse> localVarResponse = await ListDevicesAsyncWithHttpInfo(collectionId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// List devices 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <returns>Task of ApiResponse (ListDevicesResponse)</returns>
        public async System.Threading.Tasks.Task<spanclient.Client.ApiResponse<ListDevicesResponse>> ListDevicesAsyncWithHttpInfo (string collectionId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->ListDevices");


            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<ListDevicesResponse>("/collections/{collectionId}/devices", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ListDevices", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve device Retrieve a single device
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Device</returns>
        public Device RetrieveDevice (string collectionId, string deviceId)
        {
             spanclient.Client.ApiResponse<Device> localVarResponse = RetrieveDeviceWithHttpInfo(collectionId, deviceId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve device Retrieve a single device
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>ApiResponse of Device</returns>
        public spanclient.Client.ApiResponse< Device > RetrieveDeviceWithHttpInfo (string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->RetrieveDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->RetrieveDevice");

            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spanclient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spanclient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get< Device >("/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve device Retrieve a single device
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> RetrieveDeviceAsync (string collectionId, string deviceId)
        {
             spanclient.Client.ApiResponse<Device> localVarResponse = await RetrieveDeviceAsyncWithHttpInfo(collectionId, deviceId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve device Retrieve a single device
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<spanclient.Client.ApiResponse<Device>> RetrieveDeviceAsyncWithHttpInfo (string collectionId, string deviceId)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->RetrieveDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->RetrieveDevice");


            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<Device>("/collections/{collectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RetrieveDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send message Send a message to the device
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Object</returns>
        public Object SendMessage (string collectionId, string deviceId, SendMessageRequest body)
        {
             spanclient.Client.ApiResponse<Object> localVarResponse = SendMessageWithHttpInfo(collectionId, deviceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Send message Send a message to the device
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Object</returns>
        public spanclient.Client.ApiResponse< Object > SendMessageWithHttpInfo (string collectionId, string deviceId, SendMessageRequest body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SendMessage");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SendMessage");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->SendMessage");

            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spanclient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spanclient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post< Object >("/collections/{collectionId}/devices/{deviceId}/to", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Send message Send a message to the device
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> SendMessageAsync (string collectionId, string deviceId, SendMessageRequest body)
        {
             spanclient.Client.ApiResponse<Object> localVarResponse = await SendMessageAsyncWithHttpInfo(collectionId, deviceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Send message Send a message to the device
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="collectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<spanclient.Client.ApiResponse<Object>> SendMessageAsyncWithHttpInfo (string collectionId, string deviceId, SendMessageRequest body)
        {
            // verify the required parameter 'collectionId' is set
            if (collectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'collectionId' when calling DevicesApi->SendMessage");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->SendMessage");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->SendMessage");


            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (collectionId != null)
                localVarRequestOptions.PathParameters.Add("collectionId", spanclient.Client.ClientUtils.ParameterToString(collectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/collections/{collectionId}/devices/{deviceId}/to", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SendMessage", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update device 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Device</returns>
        public Device UpdateDevice (string existingCollectionId, string deviceId, UpdateDeviceRequest body)
        {
             spanclient.Client.ApiResponse<Device> localVarResponse = UpdateDeviceWithHttpInfo(existingCollectionId, deviceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Update device 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of Device</returns>
        public spanclient.Client.ApiResponse< Device > UpdateDeviceWithHttpInfo (string existingCollectionId, string deviceId, UpdateDeviceRequest body)
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling DevicesApi->UpdateDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->UpdateDevice");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->UpdateDevice");

            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };

            var localVarContentType = spanclient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = spanclient.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (existingCollectionId != null)
                localVarRequestOptions.PathParameters.Add("existingCollectionId", spanclient.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch< Device >("/collections/{existingCollectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update device 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of Device</returns>
        public async System.Threading.Tasks.Task<Device> UpdateDeviceAsync (string existingCollectionId, string deviceId, UpdateDeviceRequest body)
        {
             spanclient.Client.ApiResponse<Device> localVarResponse = await UpdateDeviceAsyncWithHttpInfo(existingCollectionId, deviceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Update device 
        /// </summary>
        /// <exception cref="spanclient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="existingCollectionId"></param>
        /// <param name="deviceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (Device)</returns>
        public async System.Threading.Tasks.Task<spanclient.Client.ApiResponse<Device>> UpdateDeviceAsyncWithHttpInfo (string existingCollectionId, string deviceId, UpdateDeviceRequest body)
        {
            // verify the required parameter 'existingCollectionId' is set
            if (existingCollectionId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'existingCollectionId' when calling DevicesApi->UpdateDevice");

            // verify the required parameter 'deviceId' is set
            if (deviceId == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'deviceId' when calling DevicesApi->UpdateDevice");

            // verify the required parameter 'body' is set
            if (body == null)
                throw new spanclient.Client.ApiException(400, "Missing required parameter 'body' when calling DevicesApi->UpdateDevice");


            spanclient.Client.RequestOptions localVarRequestOptions = new spanclient.Client.RequestOptions();

            String[] _contentTypes = new String[] {
                "application/json"
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (existingCollectionId != null)
                localVarRequestOptions.PathParameters.Add("existingCollectionId", spanclient.Client.ClientUtils.ParameterToString(existingCollectionId)); // path parameter
            if (deviceId != null)
                localVarRequestOptions.PathParameters.Add("deviceId", spanclient.Client.ClientUtils.ParameterToString(deviceId)); // path parameter
            localVarRequestOptions.Data = body;

            // authentication (APIToken) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-API-Token")))
            {
                localVarRequestOptions.HeaderParameters.Add("X-API-Token", this.Configuration.GetApiKeyWithPrefix("X-API-Token"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<Device>("/collections/{existingCollectionId}/devices/{deviceId}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateDevice", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
