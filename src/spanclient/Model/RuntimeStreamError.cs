/* 
 * The Span API
 *
 * API for device, collection, output and firmware management
 *
 * The version of the OpenAPI document: 4.0.12 reported-davon
 * Contact: dev@lab5e.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = spanclient.Client.OpenAPIDateConverter;

namespace spanclient.Model
{
    /// <summary>
    /// RuntimeStreamError
    /// </summary>
    [DataContract]
    public partial class RuntimeStreamError :  IEquatable<RuntimeStreamError>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RuntimeStreamError" /> class.
        /// </summary>
        /// <param name="grpcCode">grpcCode.</param>
        /// <param name="httpCode">httpCode.</param>
        /// <param name="message">message.</param>
        /// <param name="httpStatus">httpStatus.</param>
        /// <param name="details">details.</param>
        public RuntimeStreamError(int grpcCode = default(int), int httpCode = default(int), string message = default(string), string httpStatus = default(string), List<ProtobufAny> details = default(List<ProtobufAny>))
        {
            this.GrpcCode = grpcCode;
            this.HttpCode = httpCode;
            this.Message = message;
            this.HttpStatus = httpStatus;
            this.Details = details;
        }
        
        /// <summary>
        /// Gets or Sets GrpcCode
        /// </summary>
        [DataMember(Name="grpcCode", EmitDefaultValue=false)]
        public int GrpcCode { get; set; }

        /// <summary>
        /// Gets or Sets HttpCode
        /// </summary>
        [DataMember(Name="httpCode", EmitDefaultValue=false)]
        public int HttpCode { get; set; }

        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Gets or Sets HttpStatus
        /// </summary>
        [DataMember(Name="httpStatus", EmitDefaultValue=false)]
        public string HttpStatus { get; set; }

        /// <summary>
        /// Gets or Sets Details
        /// </summary>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public List<ProtobufAny> Details { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RuntimeStreamError {\n");
            sb.Append("  GrpcCode: ").Append(GrpcCode).Append("\n");
            sb.Append("  HttpCode: ").Append(HttpCode).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  HttpStatus: ").Append(HttpStatus).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RuntimeStreamError);
        }

        /// <summary>
        /// Returns true if RuntimeStreamError instances are equal
        /// </summary>
        /// <param name="input">Instance of RuntimeStreamError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RuntimeStreamError input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.GrpcCode == input.GrpcCode ||
                    this.GrpcCode.Equals(input.GrpcCode)
                ) && 
                (
                    this.HttpCode == input.HttpCode ||
                    this.HttpCode.Equals(input.HttpCode)
                ) && 
                (
                    this.Message == input.Message ||
                    (this.Message != null &&
                    this.Message.Equals(input.Message))
                ) && 
                (
                    this.HttpStatus == input.HttpStatus ||
                    (this.HttpStatus != null &&
                    this.HttpStatus.Equals(input.HttpStatus))
                ) && 
                (
                    this.Details == input.Details ||
                    this.Details != null &&
                    input.Details != null &&
                    this.Details.SequenceEqual(input.Details)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = hashCode * 59 + this.GrpcCode.GetHashCode();
                hashCode = hashCode * 59 + this.HttpCode.GetHashCode();
                if (this.Message != null)
                    hashCode = hashCode * 59 + this.Message.GetHashCode();
                if (this.HttpStatus != null)
                    hashCode = hashCode * 59 + this.HttpStatus.GetHashCode();
                if (this.Details != null)
                    hashCode = hashCode * 59 + this.Details.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
